services:
  postgresql:
    image: docker.io/library/postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: authentik
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: authentik
      PGDATA: /var/lib/postgresql
    volumes:
      - postgresql:/var/lib/postgresql
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authentik -d authentik"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: docker.io/library/redis
    restart: unless-stopped
    command: ["--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - redis:/data
    networks:
      - default
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  auth-server:
    image: ghcr.io/goauthentik/server:2025.8.1
    restart: unless-stopped
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_HOST: ${AUTHENTIK_HOST}
      AUTHENTIK_URL: ${AUTHENTIK_URL}
      AUTHENTIK_COOKIE_DOMAIN: ${AUTHENTIK_COOKIE_DOMAIN}
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    # not exposing ports because we want to force through NPM
    # ports:
    #   - "9000:9000"
    #   - "9443:9443"
    command: server
    volumes:
      - media:/media
      - custom-templates:/templates
    networks:
      - default
      - proxy

  auth-worker:
    image: ghcr.io/goauthentik/server:2025.8.1
    restart: unless-stopped
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_HOST: ${AUTHENTIK_HOST}
      AUTHENTIK_URL: ${AUTHENTIK_URL}
      AUTHENTIK_COOKIE_DOMAIN: ${AUTHENTIK_COOKIE_DOMAIN}
      AUTHENTIK_PROXY__TRUSTED_PROXY_CIDRS: ${AUTHENTIK_PROXY__TRUSTED_PROXY_CIDRS}
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: worker
    volumes:
      - media:/media
      - custom-templates:/templates
    networks:
      - default
      - proxy

volumes:
  postgresql:
  redis:
  media:
  custom-templates:

networks:
  proxy:
    external: true
